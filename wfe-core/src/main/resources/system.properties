# RunaWFE version (synchronized with maven build)
version=${project.version}

default.administrator.name = Administrator
default.administrator.password = wf
default.administrators.group.name = Administrators
default.bots.group.name = Bots

#strong.passwords.regexp = ^.*(?=.{8,})(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(^[a-zA-Z0-9@\$=!:.#%]+$)
strong.passwords.regexp=

scriptingServiceAPI.executeGroovyScript.enabled = false
undefined.variables.allowed = false
strong.variables.format.enabled = true
variables.autocast.enabled = true

escalation.enabled=true
escalation.default.hierarchy.loader=ru.runa.wfe.extension.orgfunction.TestOrgFunction

task.default.deadline=2 hours
task.almostDeadlinePercents=90
task.assignment.strict.rules.enabled = true

token.maximum.depth = 100
file.variable.local.storage.enabled = true
file.variable.local.storage.enableforfilesgreaterthan = 100000

authentication.domain.name=TEST
authentication.ldap.server.url=ldap://ldapserver.test.com
# How to map the user id entered by the user to that passed through to LDAP.  
# Supported placeholders are: ${username} (user login), ${domain.name} (as specified in property 'authentication.domain.name')
#  Examples
#   AD (default)          ${domain.name}\\${username}
#   AD UPN                ${username}@company_domain
#   AD DN                 cn=${username},ou=xyz,dc=company_domain
#   OpenLDAP simple       uid=${username},ou=People,dc=${domain.name},dc=com
#   OpenLDAP DIGEST-MD5   ${username}
authentication.ldap.userName.format=${domain.name}\\${username}

# LDAP settings
# LDAP server connection url (as expected by Context.PROVIDER_URL)
#ldap.connection.provider.url = ldap://172.16.100.2/dc=domain,dc=com
# authorized subject to read directory
#ldap.connection.principal=cn=LdapReader,ou=User_policy,dc=domain,dc=com
#ldap.connection.password=m0rd@v0r0tLDAP
ldap.synchronizer.enabled=false
# organization units you want to import separated by <;>
#ldap.synchronizer.ou = ou=Admins;ou=User_policy
# Full synchronization or partial synchronization (only user-group relations)
#ldap.synchronizer.create.executors=true

# used in date and time formats through the system; time format is always HH:mm or HH:mm:ss
date.format.pattern=dd.MM.yyyy

# used to prevent cyclic fork execution
# token.maximum.depth=100

# Whether method ru.runa.wfe.service.impl.ExecutionServiceBean.updateVariables(User, Long, Map<String, Object>) enabled
executionServiceAPI.updateVariables.enabled = false

# Expired jobs check interval
timertask.start.millis.job.execution = 60000
timertask.period.millis.job.execution = 5000
# Unassigned tasks check interval
timertask.start.millis.unassigned.tasks.execution = 60000
timertask.period.millis.unassigned.tasks.execution = 60000
# LDAP synchronization interval
timertask.start.millis.ldap.sync = 600000
timertask.period.millis.ldap.sync = 10800000

# Remove temporary group interval
timertask.start.millis.remove.temp.groups = 600000
timertask.period.millis.remove.temp.groups = 10800000

# whether to enable ru.runa.wfe.service.AuthenticationService.authenticateByTrustedPrincipal(User, String)
trusted.authentication.enabled = false

# configure email notification about errors: use ${processError} for process errors and ${botTaskIdentifier} for bot configuration errors
# error.email.notification.configuration = email.error.notification.xml

# transaction async execution on nodes
# Use new transaction for node execution by default
# process.execution.node.async.default = true
# Use new transaction for node execution by default for specified node type
# process.execution.node.async.NodeType = true, for example process.execution.node.async.TASK_STATE = false
# Block process execution (tasks and jobs completion) for suspended processes
# process.suspension.block.process.execution = true
# Allow process suspension (in API and web interface)
# process.suspension.enabled = true

process.swimlane.auto.initialization.enabled = false

required.validator.names = required